name: Build Pixel5 (redfin) NetHunter Kernel - Android14 (Clang) + common patches/drivers

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  KERNEL_REPO: https://android.googlesource.com/kernel/msm.git
  KERNEL_BRANCH: android-msm-redbull-4.19-android14-release
  CLANG_REPO: https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86
  CLANG_TAG: android-14.0.0_r40
  ANYKERNEL_REPO: https://github.com/osm0sis/AnyKernel3.git
  NETHUNTER_PATCHES_REPO: https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-kernel.git
  # 外置驱动示例（可按需修改/增删）
  DRIVER_88X2BU: https://github.com/morrownr/88x2bu-20210702.git
  DRIVER_RTL8812AU: https://github.com/aircrack-ng/rtl8812au.git
  DRIVER_RTW88: https://github.com/lwfinger/rtw88.git
  DRIVER_ATH9K_HTC: https://github.com/qca/open-ath9k-htc.git
  DRIVER_LIRC_KERNEL: https://github.com/torvalds/linux.git  # 仅示例：LIRC / IR 栈通常在内核 tree 或 staging
  # 你可以在 repo 中添加自定义 patch 目录：kernel_patches/*.patch

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
    - name: Checkout current repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install build deps
      run: |
        sudo apt-get update
        sudo apt-get install -y bc bison build-essential ccache flex git \
          libncurses5-dev libssl-dev python3 wget zip unzip rsync llvm ca-certificates

    - name: Fetch kernel source (redfin Android14)
      run: |
        set -e
        rm -rf kernel_redfin
        mkdir kernel_redfin
        cd kernel_redfin
        git init
        git remote add origin ${KERNEL_REPO}
        git fetch --depth=1 origin ${KERNEL_BRANCH}
        git checkout FETCH_HEAD
        git rev-parse --short HEAD > ../kernel_redfin_rev.txt
      shell: bash

    - name: Fetch NetHunter patch repository (patch sets)
      run: |
        rm -rf nethunter_patches
        git clone --depth=1 ${NETHUNTER_PATCHES_REPO} nethunter_patches || true
        # The Kali repo stores many patch directories; we'll try to pick ones for 4.19 family if present
        ls -la nethunter_patches || true
      shell: bash

    - name: Apply local and NetHunter patches (if any)
      run: |
        set -e
        cd kernel_redfin
        # apply any patches shipped inside this repo (kernel_patches/)
        if [ -d ../kernel_patches ]; then
          echo "Applying local repo patches..."
          for p in ../kernel_patches/*.patch; do
            [ -f "$p" ] || continue
            echo "Applying $p"
            git apply --index "$p" || (echo "git apply failed for $p"; git apply "$p" -p1 || true)
          done
        fi
        # Try apply Kali NetHunter patches for 4.x kernels if directory exists
        # This tries a few likely directories; adjust if necessary.
        if [ -d ../nethunter_patches/patches/4.19 ] ; then
          echo "Applying Kali NetHunter 4.19 patches..."
          for x in ../nethunter_patches/patches/4.19/*.patch; do
            [ -f "$x" ] || continue
            echo "patch -p1 < $x"
            patch -p1 < "$x" || echo "patch failed for $x"
          done
        else
          echo "No Kali 4.19 patch dir found; skipping automatic apply."
        fi
        # commit changes so later 'make' sees them
        git add -A || true
        git commit -m "Apply nethunter/local patches (auto)" || true
      shell: bash

    - name: Fetch AOSP Clang prebuilts
      run: |
        rm -rf prebuilts_clang
        git clone --depth=1 --branch ${CLANG_TAG} ${CLANG_REPO} prebuilts_clang
        CLANG_BIN=$(find prebuilts_clang -type d -name "clang-*" -maxdepth 3 -print -quit)/bin || true
        if [ -z "$CLANG_BIN" ]; then
          CLANG_BIN=$(find prebuilts_clang -type d -name "bin" -path "*/clang-*" -print -quit) || true
        fi
        echo "CLANG_BIN=$CLANG_BIN" >> $GITHUB_ENV
        echo "PATH=$CLANG_BIN:$PATH" >> $GITHUB_ENV
      shell: bash

    - name: Show clang version (sanity)
      run: |
        which clang || true
        clang --version || true

    - name: Prepare kernel defconfig (redfin)
      working-directory: kernel_redfin
      run: |
        set -e
        export PATH="$CLANG_BIN:$PATH"
        export ARCH=arm64
        export CC=clang
        if [ -f arch/arm64/configs/redfin_defconfig ]; then
          make O=out redfin_defconfig
        else
          echo "redfin_defconfig not found"
          ls arch/arm64/configs | head -n 50
          exit 1
        fi
      shell: bash

    - name: Build kernel (Image.gz-dtb, dtbs, modules) with clang
      working-directory: kernel_redfin
      run: |
        set -e
        export PATH="$CLANG_BIN:$PATH"
        export ARCH=arm64
        export CC=clang
        export LD=ld.lld
        export AR=llvm-ar
        export NM=llvm-nm
        export OBJCOPY=llvm-objcopy
        export OBJDUMP=llvm-objdump
        export STRIP=llvm-strip
        export READELF=llvm-readelf
        make -j$(nproc) O=out Image.gz-dtb dtbs modules LLVM=1
      shell: bash



 name: Build Pixel5 (redfin) NetHunter Kernel - Android14 (Clang) + common patches/drivers

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  KERNEL_REPO: https://android.googlesource.com/kernel/msm.git
  KERNEL_BRANCH: android-msm-redbull-4.19-android14-release
  CLANG_REPO: https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86
  CLANG_TAG: android-14.0.0_r40
  ANYKERNEL_REPO: https://github.com/osm0sis/AnyKernel3.git
  NETHUNTER_PATCHES_REPO: https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-kernel.git
  # 外置驱动示例（可按需修改/增删）
  DRIVER_88X2BU: https://github.com/morrownr/88x2bu-20210702.git
  DRIVER_RTL8812AU: https://github.com/aircrack-ng/rtl8812au.git
  DRIVER_RTW88: https://github.com/lwfinger/rtw88.git
  DRIVER_ATH9K_HTC: https://github.com/qca/open-ath9k-htc.git
  DRIVER_LIRC_KERNEL: https://github.com/torvalds/linux.git  # 仅示例：LIRC / IR 栈通常在内核 tree 或 staging
  # 你可以在 repo 中添加自定义 patch 目录：kernel_patches/*.patch

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
    - name: Checkout current repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install build deps
      run: |
        sudo apt-get update
        sudo apt-get install -y bc bison build-essential ccache flex git \
          libncurses5-dev libssl-dev python3 wget zip unzip rsync llvm ca-certificates

    - name: Fetch kernel source (redfin Android14)
      run: |
        set -e
        rm -rf kernel_redfin
        mkdir kernel_redfin
        cd kernel_redfin
        git init
        git remote add origin ${KERNEL_REPO}
        git fetch --depth=1 origin ${KERNEL_BRANCH}
        git checkout FETCH_HEAD
        git rev-parse --short HEAD > ../kernel_redfin_rev.txt
      shell: bash

    - name: Fetch NetHunter patch repository (patch sets)
      run: |
        rm -rf nethunter_patches
        git clone --depth=1 ${NETHUNTER_PATCHES_REPO} nethunter_patches || true
        # The Kali repo stores many patch directories; we'll try to pick ones for 4.19 family if present
        ls -la nethunter_patches || true
      shell: bash

    - name: Apply local and NetHunter patches (if any)
      run: |
        set -e
        cd kernel_redfin
        # apply any patches shipped inside this repo (kernel_patches/)
        if [ -d ../kernel_patches ]; then
          echo "Applying local repo patches..."
          for p in ../kernel_patches/*.patch; do
            [ -f "$p" ] || continue
            echo "Applying $p"
            git apply --index "$p" || (echo "git apply failed for $p"; git apply "$p" -p1 || true)
          done
        fi
        # Try apply Kali NetHunter patches for 4.x kernels if directory exists
        # This tries a few likely directories; adjust if necessary.
        if [ -d ../nethunter_patches/patches/4.19 ] ; then
          echo "Applying Kali NetHunter 4.19 patches..."
          for x in ../nethunter_patches/patches/4.19/*.patch; do
            [ -f "$x" ] || continue
            echo "patch -p1 < $x"
            patch -p1 < "$x" || echo "patch failed for $x"
          done
        else
          echo "No Kali 4.19 patch dir found; skipping automatic apply."
        fi
        # commit changes so later 'make' sees them
        git add -A || true
        git commit -m "Apply nethunter/local patches (auto)" || true
      shell: bash

    - name: Fetch AOSP Clang prebuilts
      run: |
        rm -rf prebuilts_clang
        git clone --depth=1 --branch ${CLANG_TAG} ${CLANG_REPO} prebuilts_clang
        CLANG_BIN=$(find prebuilts_clang -type d -name "clang-*" -maxdepth 3 -print -quit)/bin || true
        if [ -z "$CLANG_BIN" ]; then
          CLANG_BIN=$(find prebuilts_clang -type d -name "bin" -path "*/clang-*" -print -quit) || true
        fi
        echo "CLANG_BIN=$CLANG_BIN" >> $GITHUB_ENV
        echo "PATH=$CLANG_BIN:$PATH" >> $GITHUB_ENV
      shell: bash

    - name: Show clang version (sanity)
      run: |
        which clang || true
        clang --version || true

    - name: Prepare kernel defconfig (redfin)
      working-directory: kernel_redfin
      run: |
        set -e
        export PATH="$CLANG_BIN:$PATH"
        export ARCH=arm64
        export CC=clang
        if [ -f arch/arm64/configs/redfin_defconfig ]; then
          make O=out redfin_defconfig
        else
          echo "redfin_defconfig not found"
          ls arch/arm64/configs | head -n 50
          exit 1
        fi
      shell: bash

    - name: Build kernel (Image.gz-dtb, dtbs, modules) with clang
      working-directory: kernel_redfin
      run: |
        set -e
        export PATH="$CLANG_BIN:$PATH"
        export ARCH=arm64
        export CC=clang
        export LD=ld.lld
        export AR=llvm-ar
        export NM=llvm-nm
        export OBJCOPY=llvm-objcopy
        export OBJDUMP=llvm-objdump
        export STRIP=llvm-strip
        export READELF=llvm-readelf
        make -j$(nproc) O=out Image.gz-dtb dtbs modules LLVM=1
      shell: bash

    - name: Build & install commonly used external drivers as modules
      run: |
        set -e
        mkdir -p external_drivers
        cd external_drivers

        # Clone example external driver repos (you can add/remove)
        git clone --depth=1 ${DRIVER_88X2BU} 88x2bu || true
        git clone --depth=1 ${DRIVER_RTL8812AU} rtl8812au || true
        git clone --depth=1 ${DRIVER_RTW88} rtw88 || true
        git clone --depth=1 ${DRIVER_ATH9K_HTC} ath9k_htc || true

        KERNEL_DIR="../kernel_redfin"
        # prepare kernel for external module builds
        make -C "$KERNEL_DIR" O=out modules_prepare

        # For each driver try to build as external module (if it has a Makefile)
        for d in */ ; do
          [ -d "$d" ] || continue
          cd "$d"
          if [ -f Makefile ] || [ -f DKMS.conf ]; then
            echo "Building external module in $(pwd)"
            make -C "$KERNEL_DIR" M=$(pwd) O=out -j$(nproc) || echo "Build failed for $(pwd)"
            # copy resulting .ko files to artifacts folder
            mkdir -p ../../built_modules/$(basename $d)
            find . -name "*.ko" -exec cp --parents {} ../../built_modules/$(basename $d)/ \; || true
          else
            echo "No Makefile in $(pwd), skipping build"
          fi
          cd ..
        done
      shell: bash

    - name: Package AnyKernel3 zip (kernel image + dtbs)
      run: |
        set -e
        rm -rf anykernel
        git clone ${ANYKERNEL_REPO} anykernel
        OUTIMG=""
        if [ -f kernel_redfin/out/arch/arm64/boot/Image.gz-dtb ]; then
          OUTIMG=kernel_redfin/out/arch/arm64/boot/Image.gz-dtb
        elif [ -f kernel_redfin/out/arch/arm64/boot/Image.gz ]; then
          OUTIMG=kernel_redfin/out/arch/arm64/boot/Image.gz
        else
          echo "Kernel image not found"
          ls -la kernel_redfin/out/arch/arm64/boot || true
          exit 1
        fi
        cp "$OUTIMG" anykernel/
        cp -r kernel_redfin/out/arch/arm64/boot/dts anykernel/ 2>/dev/null || true
        (cd anykernel && zip -r9 ../Pixel5-Android14-Nethunter-Kernel.zip *)
      shell: bash

    - name: Upload artifacts (kernel zip, kernel image, built modules)
      uses: actions/upload-artifact@v4
      with:
        name: pixel5-android14-nethunter
        path: |
          Pixel5-Android14-Nethunter-Kernel.zip
          kernel_redfin/out/arch/arm64/boot/Image.gz-dtb
          kernel_redfin/out/arch/arm64/boot/Image.gz
          built_modules/**





    - name: Build & install commonly used external drivers as modules
      run: |
        set -e
        mkdir -p external_drivers
        cd external_drivers

        # Clone example external driver repos (you can add/remove)
        git clone --depth=1 ${DRIVER_88X2BU} 88x2bu || true
        git clone --depth=1 ${DRIVER_RTL8812AU} rtl8812au || true
        git clone --depth=1 ${DRIVER_RTW88} rtw88 || true
        git clone --depth=1 ${DRIVER_ATH9K_HTC} ath9k_htc || true

        KERNEL_DIR="../kernel_redfin"
        # prepare kernel for external module builds
        make -C "$KERNEL_DIR" O=out modules_prepare

        # For each driver try to build as external module (if it has a Makefile)
        for d in */ ; do
          [ -d "$d" ] || continue
          cd "$d"
          if [ -f Makefile ] || [ -f DKMS.conf ]; then
            echo "Building external module in $(pwd)"
            make -C "$KERNEL_DIR" M=$(pwd) O=out -j$(nproc) || echo "Build failed for $(pwd)"
            # copy resulting .ko files to artifacts folder
            mkdir -p ../../built_modules/$(basename $d)
            find . -name "*.ko" -exec cp --parents {} ../../built_modules/$(basename $d)/ \; || true
          else
            echo "No Makefile in $(pwd), skipping build"
          fi
          cd ..
        done
      shell: bash

    - name: Package AnyKernel3 zip (kernel image + dtbs)
      run: |
        set -e
        rm -rf anykernel
        git clone ${ANYKERNEL_REPO} anykernel
        OUTIMG=""
        if [ -f kernel_redfin/out/arch/arm64/boot/Image.gz-dtb ]; then
          OUTIMG=kernel_redfin/out/arch/arm64/boot/Image.gz-dtb
        elif [ -f kernel_redfin/out/arch/arm64/boot/Image.gz ]; then
          OUTIMG=kernel_redfin/out/arch/arm64/boot/Image.gz
        else
          echo "Kernel image not found"
          ls -la kernel_redfin/out/arch/arm64/boot || true
          exit 1
        fi
        cp "$OUTIMG" anykernel/
        cp -r kernel_redfin/out/arch/arm64/boot/dts anykernel/ 2>/dev/null || true
        (cd anykernel && zip -r9 ../Pixel5-Android14-Nethunter-Kernel.zip *)
      shell: bash

    - name: Upload artifacts (kernel zip, kernel image, built modules)
      uses: actions/upload-artifact@v4
      with:
        name: pixel5-android14-nethunter
        path: |
          Pixel5-Android14-Nethunter-Kernel.zip
          kernel_redfin/out/arch/arm64/boot/Image.gz-dtb
          kernel_redfin/out/arch/arm64/boot/Image.gz
          built_modules/**
